services:
  # vault:
  #   image: hashicorp/vault:latest
  #   container_name: vault
  #   ports:
  #     - "8201:8200"
  #   volumes:
  #     - ./vault/data:/vault/datab
  #     - ./vault/config:/vault/config
  #   environment:
  #     - VAULT_ADDR=${VAULT_ADDR}
  #     - VAULT_DEV_LISTEN_ADDRESS=${VAULT_DEV_L ISTEN_ADDRESS}
  #     - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_DEV_ROOT_TOKEN_ID}
  #   cap_add:
  #     - IPC_LOCK
  #   command: server -dev -dev-root-token-id=${VAULT_DEV_ROOT_TOKEN_ID} -dev-listen-address=${VAULT_DEV_LISTEN_ADDRESS}

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100" # Porta HTTP do Loki
      - "9095:9095" # Porta GRPC do Loki
    volumes:
      - ./Observability/loki/loki-config.yml:/etc/loki/config.yml
    command: -config.file=/etc/loki/config.yml
    networks:
      - monitoring-net
  
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090" # UI do Prometheus
    volumes:
      - ./Observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml # Arquivo de configuração
      - prometheus-data:/prometheus # Volume para persistir dados
    command: --config.file=/etc/prometheus/prometheus.yml
    networks:
      - monitoring-net

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000" # Porta do Grafana
    volumes:
      - ./Observability/grafana/provisioning/:/etc/grafana/provisioning/
      - grafana-storage:/var/lib/grafana
    depends_on:
      - loki # Garante que o Loki suba antes do Grafana
      - jaeger # Garante que o Jaeger suba antes do Grafana
      - prometheus # Garante que o Prometheus suba antes do Grafana
    networks:
      - monitoring-net

  # OpenTelemetry Collector para receber logs (e traces/metrics)
  otel-collector:
    image: otel/opentelemetry-collector-contrib
    container_name: otel-collector
    ports:
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP HTTP receiver
    command: [--config=/etc/otel-collector-config.yml]
    volumes:
      - ./Dev/otel-collector-config.yml:/etc/otel-collector-config.yml
    depends_on:
      - loki
    networks:
      - monitoring-net

  jaeger:
    image: jaegertracing/all-in-one:latest
    hostname: jaeger
    container_name: jaeger
    ports:
      - "16686:16686" # UI
      #- "4317:4317" # OTLP gRPC (para o OTel Collector enviar)
      - "14250:14250" # gRPC collector
      - "14268:14268" # HTTP collector
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
      COLLECTOR_ZIPKIN_HOST_PORT: "9411"
    volumes:
      - jaeger_data:/badger
    networks:
      - monitoring-net
  
  # nginx:
  #   image: nginx:latest
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     # - ./nginx/ssl:/etc/nginx/ssl:ro # Descomente e crie a pasta 'ssl' com seus certificados se usar HTTPS
  #   depends_on:
  #     - myapp
  #   restart: unless-stopped
  
  yosef-01:
    build:
      context: .
      dockerfile: ./src/ProjectManagement/Dockerfile
    container_name: yosef
    ports:
      - "8081:80"
    environment:
      - ASPNETCORE_URLS=http://+:80
      - ASPNETCORE_ENVIRONMENT=Development
    restart: unless-stopped
    depends_on:
      - db
    networks:
      - monitoring-net

  db:
    image: postgres:17.5
    container_name: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} # criar .env para o docker com a senha
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - monitoring-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
  
  migrator:
    image: mcr.microsoft.com/dotnet/sdk:9.0
    container_name: ef_migrator
    working_dir: /app
    volumes:
      - ./src/ProjectManagement:/app
    depends_on:
      - db
    entrypoint: >
      bash -c "
      if command -v dotnet >/dev/null 2>&1; then
        echo 'dotnet está instalado.';
      else
        echo 'dotnet NÃO está instalado.';
        exit 1;
      fi &&

      ls /ProjectManagement.Infrastructure &&

      echo 'Instalando dotnet-ef...' &&
      dotnet tool install --global dotnet-ef --version 9.0.8 &&
      
      export PATH=\"$PATH:/root/.dotnet/tools\" &&
      echo 'Mostrando o comando' &&

      dotnet-ef &&
      echo 'Executando migração...' &&

      dotnet-ef database update \
        --project ./ProjectManagement.Infrastructure/ProjectManagement.Infrastructure.csproj \
        --startup-project ./ProjectManagement.Presentation/ProjectManagement.Presentation.csproj \
        --context OrganizationContext \
        -- 'Host=postgres;Username=postgres;Password=example123;Database=banco_docker'"

networks:
  monitoring-net:
    driver: bridge

volumes:
  grafana-storage:
  jaeger_data:
  prometheus-data:
  pgdata: